x <- 2
y <- 3
class(x)
class(y)
help(read.table)
help(read.table)
#LAB1
# Assign the url to the csv file
data_url = "http://faculty.washington.edu/ezivot/econ424/sbuxPrices.csv"
# Load the data frame using read.csv
sbux_df = read.csv(file= data_url, header= TRUE, stringsAsFactors= FALSE)
# sbux_df should be a data frame object. Data frames are rectangular data objects typically with
# observations in rows and variables in columns
typeof(data_url)
summary(data_url)
head(data_url)
#LAB1
# Assign the url to the csv file
data_url = "http://faculty.washington.edu/ezivot/econ424/sbuxPrices.csv"
# Load the data frame using read.csv
sbux_df = read.csv(file= data_url, header= TRUE, stringsAsFactors= FALSE)
# sbux_df should be a data frame object. Data frames are rectangular data objects typically with
# observations in rows and variables in columns
typeof(sbux_df)
summary(sbux_df)
head(sbux_df)
class(sbux_df)
names(sbux_df)
closing_prices <- sbux_df$Adj.Close
install.packages("xts")
help(which)
which(sbux_df$Date== "3/1/1994")
index_2 = which(sbux_df$Date == "3/1/1995")
some_prices <- sbux_df$Adj.Close[c(index_1,index2),]
index_1 = which(sbux_df$Date== "3/1/1994")
index_2 = which(sbux_df$Date == "3/1/1995")
some_prices <- sbux_df$Adj.Close[c(index_1,index2),]
some_prices <- sbux_df$Adj.Close[c(index_1,index_2),]
some_prices <- sbux_df[c(index_1,index_2),]
some_prices
some_prices <- sbux_df[index_1:index_2,]
some_prices
sbux_prices_df = sbux_df[, "Adj.Close", drop=FALSE]
names(sbux_prices_df)
head(sbux_prices_df)
sbux_prices_df = sbux_df[, "Adj.Close", drop=FALSE]
price_1=sbux_prices_df[index_1]
price_2= sbux_prices_df[index_2]
some_prices <- sbux_df[index_1:index_2,]
sbux_prices_df = sbux_df[, "Adj.Close", drop=FALSE]
price_1=sbux_prices_df[index_1,]
price_2= sbux_prices_df[index_2,]
help(qplot)
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
help(qplot)
qplot(data=sbux_df$Adj.Close, col="blue", type='l',ylab="Adjusted Close")
plot(data=sbux_df$Adj.Close, col="blue", type='l',ylab="Adjusted Close")
plot(x=sbux_df$Adj.Close, col="blue", type='l',ylab="Adjusted Close")
[index_1,]
price_2= sbux_prices_df[index_2,]
n=nrow(sbux_prices_df)
plot(x=sbux_df$Adj.Close, col="blue", type='l',ylab="Adjusted Close")
sbux_ret = ((sbux_prices_df[2:n, 1] - sbux_prices_df[1:(n-1), 1])/sbux_prices_df[1:(n-1), 1])
sbux_ret
clear
sbux_ccret <- log(sbux_df[2:n,]) - log(sbux_df[1:(n-1),])
sbux_df[1]
sbux_ccret <- log(sbux_prices_df[2:n,]) - log(sbux_prices_df[1:(n-1),])
sbux_ccret
mean(sbux_ccret)
comp_returns <- as.data.frame(sbux_ret,sbux_ccret)
comp_returns <- cbind(sbux_ret,sbux_ccret)
head(comp_returns)
class(sbux_ccret)
class(comp_returns)
plot(comp_returns)
plot(sbux_ccret)
plot(sbux_ccret, type="l", col="red", lwd=2)
abline(x=0)
help(abline)
abline(h=0)
lines(sbux_ret)
lines(sbux_ret, type="l", col="blue")
lines(sbux_ret, type="l", col="blue", lwd=2)
lines(sbux_ret, type="l", col="blue", lwd=2)
lines(sbux_ccret, type="l", col="red", lwd=2)
plot(sbux_ret, type="l", col="blue", lwd=2, ylabel="Return")
comp_returns <- cbind(sbux_ret,sbux_ccret)
abline(h=0)
plot(sbux_ret, type="l", col="blue", lwd=2, ylabel="Return")
lines(sbux_ccret, type="l", col="red", lwd=2)
lines(sbux_ccret, type="l", col="red", lwd=2, ylabel="return")
lines(sbux_ccret, type="l", col="red", lwd=2, ylab="return")
help(plot)
plot(sbux_ret, type="l", col="blue", lwd=2, ylab="Return")
abline(h=0)
plot(sbux_ret, type="l", col="blue", lwd=2, ylab="Return")
lines(sbux_ccret, type="l", col="red", lwd=2, ylab="return")
abline(h=0)
plot(sbux_ret, type="l", col="blue", lwd=2, ylab="Return", main="Comparison of returns")
lines(sbux_ccret, type="l", col="red", lwd=2, ylab="return")
help(cumprd)
help(cumprod)
sbux_gret = 1 + sbux_ret
sbux_gret
#Calculate growth of 1$
sbux_gret = 1 + sbux_ret
# Compute future values
sbux_fv = cumprod(sbux_gret)
# Plot the evolution of the $1 invested in SBUX as a function of time
plot(sbux_fv, type="l", col="blue", lwd=2, ylab="Dollars",
main="FV of $1 invested in SBUX")
help(pnorm)
pnorm(0.1, mean=mu_x,sd=sigma_x)
mu_x=0.05
sigma_x=0.1
pnorm(0.1, mean=mu_x,sd=sigma_x)
.10)^2)
#pnorm
mu_x=0.05
sigma_x=0.1
1-pnorm(0.1, mean=mu_x,sd=sigma_x)
pnorm(0.1, mean=mu_x,sd=sigma_x)
qnorm(0.05,mean=mu_x,sd=sigma_x)
dnorm(0)
pnorm(0.3989)
SBUX = dnorm(x_vals, mean = 0.025, sd = 0.05)
sigma_x=0.1
1-pnorm(0.1, mean=mu_x,sd=sigma_x)
pnorm(0.1, mean=mu_x,sd=sigma_x)
qnorm(0.05,mean=mu_x,sd=sigma_x)
#Microsoft monthly return mean=0.05 and sd=0.1 and Starbucks mean=0.025 sd=0.05
x_vals = seq(-0.25, 0.35, length.out = 100)
MSFT = dnorm(x_vals, mean = 0.05, sd = 0.1)
SBUX = dnorm(x_vals, mean = 0.025, sd = 0.05)
MSFT
x_vals
1-pnorm(0.1, mean=mu_x,sd=sigma_x)
pnorm(0.1, mean=mu_x,sd=sigma_x)
qnorm(0.05,mean=mu_x,sd=sigma_x)
#Microsoft monthly return mean=0.05 and sd=0.1 and Starbucks mean=0.025 sd=0.05
x_vals = seq(-0.25, 0.35, length.out = 100)
MSFT = dnorm(x_vals, mean = 0.05, sd = 0.1)
SBUX = dnorm(x_vals, mean = 0.025, sd = 0.05)
plot(x_vals, MSFT, type = "l", col = "blue", ylab = "Normal curves",
ylim = c(0, 8))
# Add a normal curve for SBUX
lines(x_vals, SBUX, col = "red")
# Add a plot legend
legend("topleft", legend = c("Microsoft", "Starbucks"),
col = c("blue", "red"), lty = 1)
t risk for microsoft
mu_R = 0.04
sigma_R = 0.09
# Initial wealth $100,000
W0 = 100000
# 1% value-at-risk
W0 * qnorm(0.01, mean = mu_R, sd = sigma_R)
# 5% value-at-risk
W0 * qnorm(0.05, mean = mu_R, sd = sigma_R)
#Amazon and Costo
# Vectors of prices
PA = c(38.23, 41.29)
PC = c(41.11, 41.74)
# Simple monthly returns
RA = (PA[2] - PA[1]) / PA[1]
RC = (PC[2] - PC[1]) / PC[1]
#Compound monthly returns
rA= log(PA[1])-log(PA[2])
rC=log(PC[1])-log(PC[2])
rA
rC
#Compound monthly returns
rA= log(PA[2])-log(PA[1])
rC=log(PC[2])-log(PC[1])
rA
RA
#RA simple monthly return
RA_annual = (1 + RA)^12 - 1
# The simple returns on Amazon (RA) and Costco (RC) are still in your workspace
# Portfolio shares
xA = 8000 / 10000
xC = 1 - xA
# Simple monthly return
xA * RA + xC * RC
xA
install.packages(c("aemo", "e1071"))
install.packages("Amelia")
.libPaths()
install.packages("car")
install.packages("caret")
install.packages("cluster")
install.packages("forecast")
install.packages("lubridate")
data <- read.csv(url="http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE)
data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE)
help(read.csv)
data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
names(flu_data)
flu_data <- read.csv("http://www.quandl.com/api/v1/datasets/GOOGLEORG/FLUCOUNTRY.csv?trim_start=2002-12-29&trim_end=2014-08-31&collapse=weekly", header = TRUE, na.strings = "NA", stringsAsFactors = FALSE)
names(flu_data)
head(flu_data)
countries <- setdiff(colnames(flu_data), "rgroup")
countries
countries <- setdiff(colnames(flu_data), "Date")
countries
length(countries)
class(head(flu_data$Date))
help(as.Date)
flu_data$Date <- as.Date(flu_data$Date)
class(as.Date("2014-08-31"))
flu_data$Date <- as.Date(flu_data$Date, "%Y-%m-%d")
par(mfrow=c(1,1))
ylab='Cases / Week', type='l', col='blue') #what plotted?
plot(rawFluData$Canada ~ rawFluData$Date, main="Flu Trends Compared", xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
plot(flu_data$Canada ~ flu_data$Date, main="Flu Trends Compared", xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
head(countries)
countries
lines(flu_data$South.Africa ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='blue') #what plotted?
lines(flu_data$South.Africa ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='green') #what plotted?
lines(flu_data$Austria ~ flu_data$Date, xlab='Time',ylab='Cases / Week', type='l', col='red') #what plotted?
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"))
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = 1)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1')
help(legend)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1', cex= 1.25)
legend("topleft", c("Canada","South Africa","Austria"), col = c("blue","green","red"), lty = 1, bty = '1', cex= 1.25,  box.lwd = 1.2, box.col = "black")
missmap(flu_data)
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
missmap(flu_data)
help(lapply)
help(apply)
detect <- function(x) {
sum(is.na(x))
}
apply(flu_data, MARGIN = 1 , detect)
missingCount = apply(flu_data, MARGIN = 1 , detect)
sum(c(TRUE))
install.packages("Quandl")
Quandl.auth("1Xu7txG5xSDKEA36BedE")
library("Quandl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Quandl.auth("1Xu7txG5xSDKEA36BedE")
search()
# Using search() in a new R session says that these packages are
# loaded by default:
# "package:stats"     "package:graphics"
# "package:grDevices" "package:utils"     "package:datasets"
# "package:methods"   "package:base"
# Others that are useful:
# gplots
# ggplot2, reshape, plyr
showPackageContents <- function (packageName) {
# Get a list of things contained in a particular package
funlist <- objects(packageName)
# Remove things that don't start with a letter
idx <- grep('^[a-zA-Z][a-zA-Z0-9._]*', funlist)
funlist <- funlist[idx]
# Remove things that contain arrow <-
idx <- grep('<-', funlist)
if (length(idx)!=0)
funlist <- funlist[-idx]
# Make a data frame to keep track of status
objectlist <- data.frame(name=funlist,
primitive=FALSE,
func=FALSE,
object=FALSE,
constant=FALSE,
stringsAsFactors=F)
for (i in 1:nrow(objectlist)) {
fname <- objectlist$name[i]
if (exists(fname)) {
obj <- get(fname)
if (is.primitive(obj)) {
objectlist$primitive[i] <- TRUE
}
if (is.function(obj)) {
objectlist$func[i] <- TRUE
}
if (is.object(obj)) {
objectlist$object[i] <- TRUE
}
# I think these are generally constants
if (is.vector(obj)) {
objectlist$constant[i] <- TRUE
}
}
}
cat(packageName)
cat("\n================================================\n")
cat("Primitive functions: \n")
cat(objectlist$name[objectlist$primitive])
cat("\n")
cat("\n================================================\n")
cat("Non-primitive functions: \n")
cat(objectlist$name[objectlist$func  &  !objectlist$primitive])
cat("\n")
cat("\n================================================\n")
cat("Constants: \n")
cat(objectlist$name[objectlist$constant])
cat("\n")
cat("\n================================================\n")
cat("Objects: \n")
cat(objectlist$name[objectlist$object])
cat("\n")
}
showPackageContents("package:Amelia")
search()
library("Amelia", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
search()
showPackageContents("package:Amelia")
help(AmeliaView)
showPackageContents("package:dplyr")
install.packages("dplyr")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
showPackageContents("package:dplyr")
help(dplyr)
dir()
setwd("SHINY_APP_PATH")
getwd)
getwd()
getwd()
setwd("Dropbox/R/App-1/appt")
runApp()
library("shiny")
library(shiny)
runApp()
